------RUNTIME ANALYSIS-----------


-----------POINTERS---------------


------------------------------------------
In c, all character arrays are strings but not all strings are character arrays. All strings must be null terminated

Free – dynamically deallocates what mallocate did 

----------Prim's Algorithm-----------------
1. Prim's is a minimal spanning tree algorithm
    - does not use an edge more than once
    - minimal number of edges to connect all of the nodes
2. Adjacency Matrix
3. Visited, Cost, Previous
    - start by setting all nodes to univisited, cost infinite, no previous nodes
4. breadth first traversal

-----------Dijkstra's Shortest Path Algorithm------------------
1. Create an adjacency matrix
    - going to & coming from 
2. Create a 3 column chart
    - Visited, Cost, Previous - columns
    - (0,1,2,3,4 (on computer) or A,B,C,D,E) - rows/ nodes
    - Put in invalid values (False, INT_MAX, -1) 
3. Mark starting point as visited (true), set cost to 0, no previous (or else it wouldn't be a starting node)
    - conditions: nonzero, current node unvisited, position + value of previous visited node has to be less than cost 
    - All conditions must be true 
4. Record the possible paths to find the shortest path 
    ----- 2/8/19--------
5. Dijkstra's Run-Time Performance
    - O(N^2)

--------------C Language------------------
+ Does not have classes
1. Loops
    - Can't declare int(or whatever) inside of a loop
2. Arrays
    - int data [5]; rather than int [] data = new int [5];
        -mutidimensional: int name [1][1];
    - data [0] = 42; same for java & C
    - C language arrays do not have their own length
        - must have a variable to set it
3. Library Statements
    - #include <file.h> (only #include .h files; NOT .c FILES)
        - never #include a big file into another program
    - "mynewlib.h"
4. Returning something in a main:
    - int main (void) {
    - void main (void) { 
    - void (or int) main ( int argc, char ** argv){
        - char ** argv is an array of strings
        - each * is one step away from a character ; is an address of a 2-dimensional array
    - argv is argument vector ; argc is argument count
5. Print
    -printf(Hello\n"); %d part is called a format statement 
    - print("%d",myvar);
    - More than one variable:
        + print(" The value of x and y are %d %d",myvar,myvar2);
    - if you want to print "%d" then printf("%%d"); same with \n \\n
    -%c = character
    -%s = string--class
    -%f = float
    - \t
    - \a
6. Variables
    - In C, any bit pattern of all zeros is false
        - 0 = Only character in C that can be interpreted as false
            + "FALSE", 'f', √, ... are all true
        - 0.0 is FALSE
        - 0 is false
        - '\0' is false
        - "" is the only string that is false
    - typedef
        - short int = long
        - long int = long
        - time_int = indistinguishable from int
7. Optimization
    - sized characters
    - unsized characters
8. Switch/case
    - Break; //mechanism to get out of the case sequence 
9. Pointer
    -is a *
    -ex. int *ip;
    -ex. int **ipp;
    - ip = &x; //ip now points to x
    -WHY: void*v;
        v = &v;
    

------------COMPILING TERMINAL IN C-------------
gcc hello-c-world.c -o test
mdelmont:~/workspace $ ./test